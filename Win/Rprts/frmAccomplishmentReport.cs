using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Models;
using Models.Repository;
using Models.ViewModels;

namespace Win.Rprts
{
    public partial class frmAccomplishmentReport : DevExpress.XtraEditors.XtraForm
    {
        public frmAccomplishmentReport()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.Init();
            // This line of code is generated by Data Source Configuration Wizard

            // This line of code is generated by Data Source Configuration Wizard

        }

        private void Init()
        {
            try
            {
                UnitOfWork unitOfWork = new UnitOfWork();
                StaticSettings staticSettings = new StaticSettings();
                cboStaff.Properties.DataSource = unitOfWork.UsersRepo.Get(x=>x.OfficeId==staticSettings.OfficeId);
                cboNotedBy.Properties.DataSource = unitOfWork.EmployeesRepo.Get(x => x.OfficeId == staticSettings.OfficeId);
                cboReviewedBy.Properties.DataSource =
                                    unitOfWork.EmployeesRepo.Get(x => x.OfficeId == staticSettings.OfficeId);
                cboStaff.EditValue = User.UserId;
                if (DateTime.Now.Day <= 15)
                {
                    this.dtDateFrom.EditValue = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                    this.dtDateTo.EditValue = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15);
                }

                if (DateTime.Now.Day > 15)
                {
                    this.dtDateFrom.EditValue = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 16);
                    this.dtDateTo.EditValue = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
                }
            }
            catch (Exception e)
            {

            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (cboStaff.GetSelectedDataRow() is Users item)
                {

                    AccomplishmentReportViewModel model = new AccomplishmentReportViewModel()
                    {
                        UserId = item.Id,
                        DateFrom = dtDateFrom.DateTime,
                        DateTo = dtDateTo.DateTime,
                        Office = item.Offices?.OfficeName,
                        TelNo = item.Offices?.TelNo,
                        Address = item.Offices?.Address,
                        NotedBy = (cboNotedBy.GetSelectedDataRow() as Employees)?.EmployeeName,
                        NotedByPosition = (cboNotedBy.GetSelectedDataRow() as Employees)?.Position,
                        ReviewedBy = (cboReviewedBy.GetSelectedDataRow() as Employees)?.EmployeeName,
                        ReviewedByPosition = (cboReviewedBy.GetSelectedDataRow() as Employees)?.Position,
                        PeriodOf = $"For the period of: {dtDateFrom.DateTime.ToShortDateString()} to {dtDateTo.DateTime.ToShortDateString()}"
                    };
                    if (item.Offices?.UnderOfOffice != null)
                    {
                        model.Office = item.Offices?.UnderOfOffice.OfficeName + Environment.NewLine + model.Office;
                    }
                    model.Generate();
                    rptAccomplishementReports rpt = new rptAccomplishementReports()
                    {
                        DataSource = new List<AccomplishmentReportViewModel>() { model }
                    };
                    frmReportViewer frm = new frmReportViewer(rpt);
                    frm.ShowDialog();
                }


            }
            catch (Exception exception)
            {

            }
        }

        private void frmAccomplishmentReport_Load(object sender, EventArgs e)
        {

        }

        private void cboStaff_EditValueChanged(object sender, EventArgs e)
        {

        }
    }
}